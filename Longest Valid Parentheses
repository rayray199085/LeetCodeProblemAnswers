/**
 * Given a string containing just the characters '(' and ')', 
 * find the length of the longest valid (well-formed) parentheses substring.
 *
 * Example 1:
 *
 * Input: "(()"
 * Output: 2
 * Explanation: The longest valid parentheses substring is "()"
 * Example 2:
 *
 * Input: ")()())"
 * Output: 4
 * Explanation: The longest valid parentheses substring is "()()"
 */
 
 class Solution {
    public int longestValidParentheses(String s) {
        int maxValue = 0;
        //1. replace all () to #
        s = s.replaceAll("\\(\\)", "#");
        String regex = "\\((#+)\\)";
        s = recursiveReplace(regex, s, "");
        int counter = 0;
        for (int i = 0; i < s.length(); i++) {
            if ("#".equals(String.valueOf(s.charAt(i)))) {
                counter += 2;
                if (counter > maxValue) {
                    maxValue = counter;
                }
            } else {
                counter = 0;
            }
        }
        return maxValue;
    }

    private String recursiveReplace(String regex, String currentString, String previousString) {
        if (currentString.equals(previousString)) {
            return currentString;
        } else {
            String nextString = currentString.replaceAll(regex, "$1#");
            return recursiveReplace(regex, nextString, currentString);
        }
    }
}
