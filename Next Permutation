/**
 * Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
 *
 * If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
 *
 * The replacement must be in-place and use only constant extra memory.
 *
 * Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
 *
 * 1,2,3 → 1,3,2
 * 3,2,1 → 1,2,3
 * 1,1,5 → 1,5,1
 */
 
 class Solution {
    public void nextPermutation(int[] nums) {
        boolean isReverseOrder = true;
        for (int i = nums.length - 1; i > 0; i--) {
            int j = i - 1;
            if (nums[j] < nums[i]) {
                isReverseOrder = false;
                reversePartialNums(i, nums);
                doExchange(j, nums[j], nums, i);
                return;
            }
        }
        if (isReverseOrder) {
            Arrays.sort(nums);
        }
    }

    private void doExchange(int position, int num, int[] nums, int j) {
        for (int i = j; i < nums.length; i++) {
            if (nums[i] > num) {
                int temp = nums[i];
                nums[i] = num;
                nums[position] = temp;
                return;
            }
        }
    }

    private void reversePartialNums(int j, int[] nums) {
        int counter = 0;
        for (int i = j; i < nums.length; i++) {
            if (i >= nums.length - 1 - counter) {
                break;
            }
            int temp = nums[i];
            nums[i] = nums[nums.length - 1 - counter];
            nums[nums.length - 1 - counter] = temp;
            counter++;
        }
        
    }

}
