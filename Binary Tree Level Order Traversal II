/**
 * Given a binary tree, return the bottom-up level order traversal of its nodes' values. 
 * 
 * (ie, from left to right, level by level from leaf to root).
 *
 * For example:
 * Given binary tree [3,9,20,null,null,15,7],
 *
 *     3
 *    / \
 *   9  20
 *     /  \
 *    15   7
 * return its bottom-up level order traversal as:
 *
 * [
 *   [15,7],
 *   [9,20],
 *   [3]
 * ]
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public static  List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> listList = new ArrayList<>();
        if(root == null) return listList;
        preOrderTraverse(listList,root,0);
        Collections.reverse(listList);
        return listList;
    }

    private static void preOrderTraverse(List<List<Integer>> listList, TreeNode root, int currentLevel) {
        if(root == null){
            return;
        }
        if(listList.size() > currentLevel){
            listList.get(currentLevel).add(root.val);
        }else{
            List<Integer> list = new ArrayList<>();
            list.add(root.val);
            listList.add(list);
        }
        preOrderTraverse(listList,root.left,currentLevel + 1);
        preOrderTraverse(listList,root.right,currentLevel + 1);
    }
}
