/**
 * Write an efficient algorithm that searches for a value in an m x n matrix. 
 * 
 * This matrix has the following properties:
 *
 * Integers in each row are sorted from left to right.
 * The first integer of each row is greater than the last integer of the previous row.
 * Example 1:
 *
 * Input:
 * matrix = [
 *   [1,   3,  5,  7],
 *   [10, 11, 16, 20],
 *   [23, 30, 34, 50]
 * ]
 * target = 3
 * Output: true
 * Example 2:
 *
 * Input:
 * matrix = [
 *   [1,   3,  5,  7],
 *   [10, 11, 16, 20],
 *   [23, 30, 34, 50]
 * ]
 * target = 13
 * Output: false
 */
 
 class Solution {
   public static boolean searchMatrix(int[][] matrix, int target) {
        if (matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        int row = 0;
        for (int i = 0; i < matrix.length; i++) {
            if (matrix[i][matrix[i].length - 1] >= target) {
                row = i;
                break;
            }
        }
        return binarySearch(matrix, row, 0, (matrix[row].length - 1) / 2, matrix[row].length - 1, target);
    }

    private static boolean binarySearch(int[][] matrix, int row, int left, int mid, int right, int target) {
        if (left > right) {
            return matrix[row][mid] == target;
        }
        if (matrix[row][mid] == target) {
            return true;
        } else if (matrix[row][mid] < target) {
            left = mid + 1;
            mid = (left + right) / 2;
            return binarySearch(matrix, row, left, mid, right, target);
        } else {
            right = mid - 1;
            mid = (left + right) / 2;
            return binarySearch(matrix, row, left, mid, right, target);
        }
    }
}
