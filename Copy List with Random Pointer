/**
 * A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
 *
 * Return a deep copy of the list.
 *
 *
 *
 * Example 1:
 *
 *
 *
 * Input:
 * {"$id":"1","next":{"$id":"2","next":null,"random":{"$ref":"2"},"val":2},"random":{"$ref":"2"},"val":1}
 *
 * Explanation:
 * Node 1's value is 1, both of its next and random pointer points to Node 2.
 * Node 2's value is 2, its next pointer points to null and its random pointer points to itself.
 *
 *
 * Note:
 *
 * You must return the copy of the given head as a reference to the cloned list.
 */
 /*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
   public Node copyRandomList(Node head) {
        Node newHead = new Node();
        if(head == null) return null;
        Map<Node,Node> map = new HashMap<>();
        generateANewLinkedList(head,newHead,map);
        connectRandomNodes(head,newHead,map);
        return newHead;
    }

    private void connectRandomNodes(Node head, Node newHead, Map<Node, Node> map) {
        if(head == null){
            return;
        }
         if(head.random != null){
            newHead.random = map.get(head.random);
        }else{
            newHead.random = null;
        }
        connectRandomNodes(head.next,newHead.next,map);
    }

    private void generateANewLinkedList(Node head, Node newHead, Map<Node, Node> map) {
        newHead.val = head.val;
        map.put(head, newHead);
        if (head.next != null) {
            Node nextNode = new Node();
            newHead.next = nextNode;
            generateANewLinkedList(head.next, nextNode, map);
        }else{
            newHead.next = null;
        }
    }
}
