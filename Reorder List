/**
 * Given a singly linked list L: L0→L1→…→Ln-1→Ln,
 * reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…
 *
 * You may not modify the values in the list's nodes, only nodes itself may be changed.
 *
 * Example 1:
 *
 * Given 1->2->3->4, reorder it to 1->4->2->3.
 * Example 2:
 *
 * Given 1->2->3->4->5, reorder it to 1->5->2->4->3.
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
     public void reorderList(ListNode head) {
        if(head == null) return;
        List<ListNode> nodeList = new ArrayList<>();
        getAllNodesInOrder(head,nodeList);
        int start = 0;
        int end = nodeList.size() - 1;
        List<ListNode> newList = new ArrayList<>();
        while(start <= end){
            newList.add(nodeList.get(start));
            newList.add(nodeList.get(end));
            start++;
            end--;
        }
        for(int i = 0; i < newList.size() - 1; i++){
            int j = i + 1;
            newList.get(i).next = newList.get(j);
            newList.get(j).next = null;
        }
    }

    private void getAllNodesInOrder(ListNode head, List<ListNode> nodeList) {
        if(head == null){
            return;
        }
        nodeList.add(head);
        getAllNodesInOrder(head.next,nodeList);
    }
}
