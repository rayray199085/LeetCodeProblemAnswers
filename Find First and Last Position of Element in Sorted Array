/**
 * Given an array of integers nums sorted in ascending order,
 * 
 * find the starting and ending position of a given target value.
 *
 * Your algorithm's runtime complexity must be in the order of O(log n).
 *
 * If the target is not found in the array, return [-1, -1].
 *
 * Example 1:
 *
 * Input: nums = [5,7,7,8,8,10], target = 8
 * Output: [3,4]
 * Example 2:
 *
 * Input: nums = [5,7,7,8,8,10], target = 6
 * Output: [-1,-1]
 */
 
 class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = new int[]{-1, -1};
        int left = 0;
        int right = nums.length - 1;
        int mid = (left + right) / 2;
        if (nums.length == 0) {
            return result;
        }
        if (target < nums[left] || target > nums[right]) {
            return result;
        }
        if (target == nums[0] && target == nums[nums.length - 1]) {
            result[0] = 0;
            result[1] = nums.length - 1;
            return result;
        }
        binarySearch(left, mid, right, nums, target, result);
        
        if (result[0] == -1 && result[1] != -1)
        {
            result[0] = result[1];
        }
        else if(result[0] != -1 && result[1] == -1){
            result[1] = result[0];
        }
            return result;
    }

    private int[] binarySearch(int left, int mid, int right, int[] nums, int target, int[] result) {
        if (left > right) {
            return result;
        } else {
            if (nums[mid] == target) {
                result[0] = findStart(mid, nums, target);
                result[1] = findEnd(mid, nums, target);
                return result;
            } else if (nums[mid] < target && target <= nums[right]) {
                left = mid + 1;
                return binarySearch(left, (left + right) / 2, right, nums, target, result);
            } else if (nums[left] <= target && target < nums[mid]) {
                right = mid - 1;
                return binarySearch(left, (left + right) / 2, right, nums, target, result);
            } else {
                return result;
            }
        }
    }

    private int findEnd(int mid, int[] nums, int target) {
        if (mid + 1 < nums.length) {
            for (int i = mid + 1; i < nums.length; i++) {
                if (nums[i] != target) {
                    return i - 1;
                }
            }
            return nums.length - 1;
        } else {
            return mid;
        }
    }

    private int findStart(int mid, int[] nums, int target) {
        if (mid - 1 > -1) {
            for (int i = mid - 1; i > -1; i--) {
                if (nums[i] != target) {
                    return i + 1;
                }
            }
            return 0;
        } else {
            return mid;
        }
    }
}
