/**
 * Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
 *
 * A region is captured by flipping all 'O's into 'X's in that surrounded region.
 *
 * Example:
 *
 * X X X X
 * X O O X
 * X X O X
 * X O X X
 * After running your function, the board should be:
 *
 * X X X X
 * X X X X
 * X X X X
 * X O X X
 * Explanation:
 *
 * Surrounded regions shouldnâ€™t be on the border, which means that any 'O' on the border of 
 * 
 * the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 
 * 
 * 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected 
 * 
 * horizontally or vertically.
 */
 class Solution {
   public void solve(char[][] board) {
        if (board.length < 3 || board[0].length < 3) return;
        Set<Integer> unflippableOgroup = new HashSet<>();
        int[] current = new int[]{0, 0};
        for (int j = 0; j < board[0].length; j++) {
            current[1] = j;
//            System.out.println(current[0] +"---" + current[1]);
//            System.out.println(board[0][j]);
            if (board[0][j] == 'O') {
                unflippableOgroup.add(transform2Integer(current,board[0].length));
                findAllConnectedO(board, current, unflippableOgroup);
            }
        }
        for (int i = 1; i < board.length; i++) {
            current[0] = i;
//            System.out.println(current[0] +"---" + current[1]);
//            System.out.println(board[i][board[0].length -1]);
            if (board[i][board[0].length - 1] == 'O') {
                unflippableOgroup.add(transform2Integer(current,board[0].length));
                findAllConnectedO(board, current, unflippableOgroup);
            }
        }
        for (int j = board[0].length - 2; j > -1; j--) {
            current[1] = j;
//            System.out.println(current[0] +"---" + current[1]);
//            System.out.println(board[board.length - 1][j]);
            if (board[board.length - 1][j] == 'O') {
                unflippableOgroup.add(transform2Integer(current,board[0].length));
                findAllConnectedO(board, current, unflippableOgroup);
            }
        }
        for (int i = board.length - 2; i > 0; i--) {
            current[0] = i;
//            System.out.println(current[0] +"---" + current[1]);
//            System.out.println(board[i][0]);
            if (board[i][0] == 'O') {
                unflippableOgroup.add(transform2Integer(current,board[0].length));
                findAllConnectedO(board, current, unflippableOgroup);
            }
        }
        for(int i = 1; i < board.length -1; i++){
            for(int j = 1; j < board[0].length -1; j++){
                current[0] = i;
                current[1] = j;
                if(board[i][j] == 'O' && unflippableOgroup.add(transform2Integer(current,board[0].length))){
                    board[i][j] = 'X';
                }
            }
        }
        // for(int i = 0; i < board.length ; i++){
        //     for(int j = 0; j < board[0].length; j++){
        //         System.out.print(board[i][j] + " ");
        //     }
        //     System.out.println();
        // }
    }

    private int transform2Integer(int[] current,int width) {
        return current[0] * width + current[1];
    }

    private void findAllConnectedO(char[][] board, int[] current, Set<Integer> unflippableOgroup) {
        if (board[current[0]][current[1]] == 'X') {
            return;
        }
        // up
        if (current[0] - 1 > -1 && board[current[0] - 1][current[1]] == 'O') {
            current[0]--;
            if (unflippableOgroup.add(transform2Integer(current,board[0].length))) {
                findAllConnectedO(board, current, unflippableOgroup);
            }
            current[0]++;
        }
        // left
        if (current[1] - 1 > -1 && board[current[0]][current[1] - 1] == 'O') {
            current[1]--;
            if (unflippableOgroup.add(transform2Integer(current,board[0].length))) {
                findAllConnectedO(board, current, unflippableOgroup);
            }
            current[1]++;
        }
        // down
        if (current[0] + 1 < board.length && board[current[0] + 1][current[1]] == 'O') {
            current[0]++;
            if (unflippableOgroup.add(transform2Integer(current,board[0].length))) {
                findAllConnectedO(board, current, unflippableOgroup);
            }
            current[0]--;
        }
        // right
        if (current[1] + 1 < board[0].length && board[current[0]][current[1] + 1] == 'O') {
            current[1]++;
            if (unflippableOgroup.add(transform2Integer(current,board[0].length))) {
                findAllConnectedO(board, current, unflippableOgroup);
            }
            current[1]--;
        }
    }
}
