/**
 * Given a binary tree, return the inorder traversal of its nodes' values.
 *
 * Example:
 *
 * Input: [1,null,2,3]
 *    1
 *     \
 *      2
 *     /
 *    3
 *
 * Output: [1,3,2]
 */
 
 class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> integerList = new ArrayList<>();
        if (root == null) {
            return integerList;
        }
        getIntegerValueFromTree(integerList, root);
        // System.out.println(integerList.toString());
        return integerList;
    }

    private void getIntegerValueFromTree(List<Integer> integerList, TreeNode root) {

        if (root == null) {
            return;
        }
        if(root.left!=null){
          getIntegerValueFromTree(integerList,root.left);
        }
        integerList.add(root.val);
        if(root.right!=null){
            getIntegerValueFromTree(integerList,root.right);
        }
    }
}
