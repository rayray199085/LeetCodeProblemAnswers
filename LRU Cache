/**
 * Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
 * <p>
 * get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
 * put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.
 * <p>
 * Follow up:
 * Could you do both operations in O(1) time complexity?
 * <p>
 * Example:
 * <p>
 * LRUCache cache = new LRUCache( 2 /* capacity);
 *
 *
 *cache.put(1,1);
 *cache.put(2,2);
 *cache.get(1);       // returns 1
 *cache.put(3,3);    // evicts key 2
 *cache.get(2);       // returns -1 (not found)
 *cache.put(4,4);    // evicts key 1
 *cache.get(1);       // returns -1 (not found)
 *cache.get(3);       // returns 3
 *cache.get(4);       // returns 4
 */
 
class LRUCache {
    private Map<Integer, Integer> map;
    private LinkedList<Integer> linkedList;
    private int capacity;
    public LRUCache(int capacity) {
        map = new HashMap<>();
        linkedList = new LinkedList<>();
        this.capacity = capacity;
    }

    public int get(int key) {
        if(map.get(key) != null){
            bubbleUp(key);
            return map.get(key);
        }else {
            return -1;
        }
    }
    public void put(int key, int value) {
        if(map.get(key) != null){
            bubbleUp(key);
            map.put(key,value);
        }else{
            if(linkedList.size() < capacity){
                
            }else{
                int previousKey = linkedList.removeFirst();
                map.remove(previousKey);
            }
            linkedList.add(key);
            map.put(key, value);
        }
    }
    private void bubbleUp(int key){
        int index = linkedList.indexOf(key);
        int newHead = linkedList.remove(index);
        linkedList.add(newHead);
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
