/**
 * mplement atoi which converts a string to an integer.
 *
 * The function first discards as many whitespace characters as necessary until the first
 * non-whitespace character is found. Then, starting from this character, takes an optional initial
 * plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.
 *
 * The string can contain additional characters after those that form the integral number,
 * which are ignored and have no effect on the behavior of this function.
 *
 * If the first sequence of non-whitespace characters in str is not a valid integral number,
 * or if no such sequence exists because either str is empty or it contains only whitespace characters,
 * no conversion is performed.
 *
 * If no valid conversion could be performed, a zero value is returned.
 *
 * Note:
 *
 * Only the space character ' ' is considered as whitespace character.
 * Assume we are dealing with an environment which could only store integers within the 32-bit
 * signed integer range: [−2^31,  2^31 − 1]. If the numerical value is out of the range of
 * representable values, INT_MAX (2^31 − 1) or INT_MIN (−2^31) is returned.
 */
 
 class Solution {
     public static int myAtoi(String str) {
        String characters = "-+0123456789";
        String characters1 = "0123456789";
        str = str.trim();
        StringBuffer stringBuffer = new StringBuffer();
        String[] strings = str.split("");
        if(str.length()==1 && !characters1.contains(str)){
            return 0;
        }
        if (!characters.contains(strings[0]) || "".equals(str)) {
            return 0;
        } else {
            for (int i = 0; i < strings.length; i++) {
                if (i == 0 && characters.contains(strings[i])) {
                    if("+".equals(strings[i])){
                        continue;
                    }
                    else {
                        stringBuffer.append(strings[i]);
                    }
                } else if (i > 0 && characters1.contains(strings[i])) {
                    stringBuffer.append(strings[i]);
                } else {
                    break;
                }
            }
            String[] split = stringBuffer.toString().split("");
            if("".equals(stringBuffer.toString()) || (stringBuffer.length()==1 && !characters1.contains(stringBuffer.toString()))){
                return 0;
            }
            int result = 0;
            try {
                result = Integer.parseInt(stringBuffer.toString());
            } catch (Exception e) {
               if(!"-".equals(split[0])){
                   return Integer.MAX_VALUE;
               }
               else{
                   return Integer.MIN_VALUE;
               }
            }
            return result;
        }
    }
}
