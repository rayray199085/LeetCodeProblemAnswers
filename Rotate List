/**
 * Given a linked list, rotate the list to the right by k places, where k is non-negative.
 *
 * Example 1:
 *
 * Input: 1->2->3->4->5->NULL, k = 2
 * Output: 4->5->1->2->3->NULL
 * Explanation:
 * rotate 1 steps to the right: 5->1->2->3->4->NULL
 * rotate 2 steps to the right: 4->5->1->2->3->NULL
 * Example 2:
 *
 * Input: 0->1->2->NULL, k = 4
 * Output: 2->0->1->NULL
 * Explanation:
 * rotate 1 steps to the right: 2->0->1->NULL
 * rotate 2 steps to the right: 1->2->0->NULL
 * rotate 3 steps to the right: 0->1->2->NULL
 * rotate 4 steps to the right: 2->0->1->NULL
 */
/**

 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
     public ListNode rotateRight(ListNode head, int k) {
        if (head == null) {
            return null;
        }
        LinkedList<Integer> integerLinkedList = new LinkedList<>();
        initLinkedList(integerLinkedList, head);
        if (k > integerLinkedList.size()) {
            k = k % integerLinkedList.size();
        }
        rotateLinkedList(integerLinkedList, k);

        ListNode newHeadNode = new ListNode(integerLinkedList.removeFirst());
        generateNewHead(integerLinkedList,newHeadNode,newHeadNode);
        return newHeadNode;
    }

    private void generateNewHead(LinkedList<Integer> integerLinkedList, ListNode headNode, ListNode currentNode) {
        if(integerLinkedList.size()==0){
            return;
        }
        currentNode.next = new ListNode(integerLinkedList.removeFirst());
        generateNewHead(integerLinkedList, headNode, currentNode.next);
    }

    private  void rotateLinkedList(LinkedList<Integer> integerLinkedList, int k) {
        if (k == 0) {
            return;
        }
        int last = integerLinkedList.removeLast();
        integerLinkedList.addFirst(last);
        rotateLinkedList(integerLinkedList,--k);
    }

    private void initLinkedList(LinkedList<Integer> integerLinkedList, ListNode head) {
        if (head == null) {
            return;
        }
        integerLinkedList.add(head.val);
        initLinkedList(integerLinkedList, head.next);
    }
}
