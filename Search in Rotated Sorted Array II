/**
 * Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
 *
 * (i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
 *
 * You are given a target value to search. If found in the array return true, otherwise return false.
 *
 * Example 1:
 *
 * Input: nums = [2,5,6,0,0,1,2], target = 0
 * Output: true
 * Example 2:
 *
 * Input: nums = [2,5,6,0,0,1,2], target = 3
 * Output: false
 */
 
class Solution {
     public static boolean search(int[] nums, int target) {
        if (nums.length == 0) {
            return false;
        }
        Set<Integer> set = new HashSet<>();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (set.add(nums[i])){
                list.add(nums[i]);
            }
        }
        if(list.size() != nums.length){
            int[] newNums = new int[list.size()];
            for(int i = 0; i < list.size(); i++){
                newNums[i] = list.get(i);
            }
            nums = newNums;
        }
     
        int left = 0;
        int right = nums.length - 1;
        int mid = (left + right) / 2;
        return binarySearchTarget(nums, target, left, mid, right);
    }

    private static boolean binarySearchTarget(int[] nums, int target, int left, int mid, int right) {
        if (left >= right) {
            if (nums[left] != target) {
                return false;
            } else {
                return true;
            }
        }
        if (nums[mid] == target) {
            return true;
        } else if (nums[mid] < nums[right]) {
            if (nums[mid] < target && target <= nums[right]) {
                left = mid + 1;
                return binarySearchTarget(nums, target, left, (left + right) / 2, right);
            } else {
                right = mid - 1;
                return binarySearchTarget(nums, target, left, (left + right) / 2, right);
            }
        } else {
            if (nums[left] <= target && target < nums[mid]) {
                right = mid - 1;
                return binarySearchTarget(nums, target, left, (left + right) / 2, right);
            } else {
                left = mid + 1;
                return binarySearchTarget(nums, target, left, (left + right) / 2, right);
            }
        }
    }

}
