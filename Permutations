/**
 * Given a collection of distinct integers, return all possible permutations.
 *
 * Example:
 *
 * Input: [1,2,3]
 * Output:
 * [
 *   [1,2,3],
 *   [1,3,2],
 *   [2,1,3],
 *   [2,3,1],
 *   [3,1,2],
 *   [3,2,1]
 * ]
 */
 
 class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> listList = new ArrayList<>();
        if (nums.length == 0) {
            return listList;
        }
        List<Integer> integerList = new ArrayList<>();
        generatePermutations(listList,nums,integerList);
        return listList;
    }

    private void generatePermutations(List<List<Integer>> listList, int[] nums, List<Integer> integerList) {
        if(integerList.size() == nums.length){
            listList.add(new ArrayList<>(integerList));
            return;
        }
        for(int i = 0; i < nums.length; i++){
            if(!integerList.contains(nums[i])){
                integerList.add(nums[i]);
                generatePermutations(listList,nums,integerList);
                integerList.remove(integerList.size()-1);
            }
        }
    }

}
