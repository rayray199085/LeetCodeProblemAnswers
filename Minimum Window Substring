/**
 * Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).
 *
 * Example:
 *
 * Input: S = "ADOBECODEBANC", T = "ABC"
 * Output: "BANC"
 * Note:
 *
 * If there is no such window in S that covers all characters in T, return the empty string "".
 * If there is such window, you are guaranteed that there will always be only one unique minimum window in S.
 *
 * 
 * A B C D E ....
 * 1 1 1 0 0
 *
 * min
 * 1. ADOBEC
 * 2. DOBECODEBA
 * 3. OBECODEBA
 * 4. BECODEBA
 * 5. ECODEBA
 * 6. ODEBANC
 * 7.
 *
 *
 *
 * A  D  O  B   E  C   O   D   E   B   A  N  C  total 3
 * 1  0  0  1   0  1   0   0   0   1   1  0  1
 *                 i
 * j
 * 0                                            total 2
 *   -1 -1  0
 *                                              total 1
 *             -1  0                            total 0
 *
 * from = 0
 * 1
 *   j                                          total 1
 *                                     i
 *                   -1  -1  -1  -1    0        total 0
 *   0
 *      0
 *         0      1                             total 1
 *                    j
 *                                            i
 *                                       -1   0 total 0
 *                    0   0  0    1
 *
 *
 *
 */
 
class Solution {
   public static String minWindow(String s, String t) {
        int[] count = new int[128];
        for (char c : t.toCharArray()) {
            count[c]++;
        }
        int from = 0;
        int total = t.length();
        int min = Integer.MAX_VALUE;
        for (int i = 0, j = 0; i < s.length(); i++) {
            if (count[s.charAt(i)]-- > 0) {
                total--;
            }
            while (total == 0) {
                if (i - j + 1 < min) {
                    min = i - j + 1;
                    from = j;
                }
                if (++count[s.charAt(j++)] > 0) {
                    total++;
                }
            }
        }
        return (min == Integer.MAX_VALUE) ? "" : s.substring(from, from + min);
    }
}
