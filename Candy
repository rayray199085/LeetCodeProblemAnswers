/**
 * There are N children standing in a line. Each child is assigned a rating value.
 *
 * You are giving candies to these children subjected to the following requirements:
 *
 * Each child must have at least one candy.
 * Children with a higher rating get more candies than their neighbors.
 * What is the minimum candies you must give?
 *
 * Example 1:
 *
 * Input: [1,0,2]
 * Output: 5
 * Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
 * Example 2:
 *
 * Input: [1,2,2]
 * Output: 4
 * Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
 *              The third child gets 1 candy because it satisfies the above two conditions.
 */
class Solution {
     public static int candy(int[] ratings) {
        if (ratings.length == 0) {
            return 0;
        }
        int[] candies = new int[ratings.length];
        Arrays.fill(candies, 1);
        for(int i = 0; i < ratings.length - 1; i++){
            int j = i + 1;
            if(ratings[i] < ratings[j]){
                candies[j] = candies[i] + 1;
            }
            else if(ratings[i] > ratings[j]){
                if(i > 0 && ratings[i] >= ratings[i - 1]){
                    continue;
                }else{
                    candies[i] = candies[j] + 1;
                }
            }

        }
        for(int i = 0; i < ratings.length; i++){
            traceBackToCheck(i,ratings,candies);
        }
        int count = 0;
        for(int i : candies){
            // System.out.println(i);
            count += i;
        }
        return count;
    }

    private static void traceBackToCheck(int currentIndex, int[] ratings, int[] candies) {
        if(currentIndex == 0){
            return;
        }if(ratings[currentIndex - 1] <= ratings[currentIndex]){
            return;
        }
        for(int i = currentIndex; i > 0; i--){
            if(ratings[i] < ratings[i - 1] && candies[i] >= candies[i - 1]){
                candies[i - 1] = candies[i] + 1;
            }
        }
    }
}
