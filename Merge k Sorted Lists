/**
 * Merge k sorted linked lists and return it as one sorted list. 
 * Analyze and describe its complexity.
 *
 * Example:
 *
 * Input:
 * [
 *   1->4->5,
 *   1->3->4,
 *   2->6
 * ]
 * Output: 1->1->2->3->4->4->5->6
 */
 
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0){
            return null;
        }
        else{
            boolean isNullList = true;
            for(ListNode node : lists){
                if (node!=null){
                    isNullList = false;
                }
            }
            if(isNullList){
                return null;
            }
        }

        List<Integer> nodeValueList = new ArrayList<>();
        nodeValueList = getNodeListValue(lists, nodeValueList);
        Collections.sort(nodeValueList);
        int headValue = nodeValueList.get(0);
        nodeValueList.remove(0);
        ListNode newHeadNode = new ListNode(headValue);
        return generateANewNodeList(newHeadNode, newHeadNode, nodeValueList);
    }

    private ListNode generateANewNodeList(ListNode newHeadNode, ListNode currentNode, List<Integer> nodeValueList) {
        if (nodeValueList.isEmpty()) {
            return newHeadNode;
        } else {
            int nextValue = nodeValueList.get(0);
            nodeValueList.remove(0);
            ListNode nextNode = new ListNode(nextValue);
            currentNode.next = nextNode;
            return generateANewNodeList(newHeadNode, nextNode, nodeValueList);
        }
    }

    private List<Integer> getNodeListValue(ListNode[] lists, List<Integer> nodeValueList) {
        for (int i = 0; i < lists.length; i++) {
            List<Integer> values = new ArrayList<>();
            values = getValues(lists[i], values);
            nodeValueList.addAll(values);
        }
        return nodeValueList;
    }

    private List<Integer> getValues(ListNode node, List<Integer> values) {
        if (node == null) {
            return values;
        } else {
            values.add(node.val);
            return getValues(node.next, values);
        }
    }
}
