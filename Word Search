/**
 * Given a 2D board and a word, find if the word exists in the grid.
 *
 * The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. 
 * 
 * The same letter cell may not be used more than once.
 *
 * Example:
 *
 * board =
 * [
 *   ['A','B','C','E'],
 *   ['S','F','C','S'],
 *   ['A','D','E','E']
 * ]
 *
 * Given word = "ABCCED", return true.
 * Given word = "SEE", return true.
 * Given word = "ABCB", return false.
 */
 
 class Solution {
     public static boolean exist(char[][] board, String word) {
        if (word.length() > board[0].length * board.length) {
            return false;
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == word.charAt(0)) {
                    if (word.length() > 1) {
                        boolean[] doesExist = new boolean[1];
                        board[i][j] = '*';
                        checkWordExists(board, i, j, word, 1, doesExist);
                        board[i][j] = word.charAt(0);
                        if (doesExist[0]) {
                            return true;
                        }
                    } else {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private static void checkWordExists(char[][] board, int row, int column, String word, int currentWordIndex, boolean[] doesExist) {
        if (currentWordIndex == word.length()) {
            doesExist[0] = true;
            return;
        }
        // check the right direction
        if (column + 1 < board[row].length && board[row][column + 1] == word.charAt(currentWordIndex)) {
            board[row][column + 1] = '*';
            checkWordExists(board, row, column + 1, word, currentWordIndex + 1, doesExist);
            board[row][column + 1] = word.charAt(currentWordIndex);
        }
        // check the left direction
        if (column - 1 > -1 && board[row][column - 1] == word.charAt(currentWordIndex)) {
            board[row][column - 1] = '*';
            checkWordExists(board, row, column - 1, word, currentWordIndex + 1, doesExist);
            board[row][column - 1] = word.charAt(currentWordIndex);
        }
        // check the downward direction
        if (row + 1 < board.length && board[row + 1][column] == word.charAt(currentWordIndex)) {
            board[row + 1][column] = '*';
            checkWordExists(board, row + 1, column, word, currentWordIndex + 1, doesExist);
            board[row + 1][column] = word.charAt(currentWordIndex);
        }
        // check the upward direction
        if (row - 1 > -1 && board[row - 1][column] == word.charAt(currentWordIndex)) {
            board[row - 1][column] = '*';
            checkWordExists(board, row - 1, column, word, currentWordIndex + 1, doesExist);
            board[row - 1][column] = word.charAt(currentWordIndex);
        }
    }
}
