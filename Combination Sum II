/**
 * Given a collection of candidate numbers (candidates) and a target number (target), 
 * 
 * find all unique combinations in candidates where the candidate numbers sums to target.
 *
 * Each number in candidates may only be used once in the combination.
 *
 * Note:
 *
 * All numbers (including target) will be positive integers.
 * The solution set must not contain duplicate combinations.
 * Example 1:
 *
 * Input: candidates = [10,1,2,7,6,1,5], target = 8,
 * A solution set is:
 * [
 *   [1, 7],
 *   [1, 2, 5],
 *   [2, 6],
 *   [1, 1, 6]
 * ]
 * Example 2:
 *
 * Input: candidates = [2,5,2,1,2], target = 5,
 * A solution set is:
 * [
 *   [1,2,2],
 *   [5]
 * ]
 */
 class Solution {
     public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> listList = new ArrayList<>();
        if (candidates.length == 0) {
            return listList;
        }
        Arrays.sort(candidates);
        Set<List<Integer>> listSet = new HashSet<>();
        List<Integer> integerList = new ArrayList<>();
        List<Integer> intList = getArrayCopyList(candidates);
        getCombinations(intList, target, listSet, integerList);
        listList.addAll(listSet);
    
        return listList;
    }

    private List<Integer> getArrayCopyList(int[] candidates) {
        List<Integer> intList = new ArrayList<>();
        for (int i : candidates) {
            intList.add(i);
        }
        return intList;
    }

    private void getCombinations(List<Integer> intList, int target, Set<List<Integer>> listSet,
                                        List<Integer> integerList) {
        int listSum = getListSum(integerList);
        if (listSum == target) {
            List<Integer> copyList = new ArrayList<>();
            copyList.addAll(integerList);
            Collections.sort(copyList);
            listSet.add(copyList);
            return;
        } else if (listSum > target) {
            return;
        }
        int position = 0;
        while (position < intList.size()) {
            int num = intList.get(position);
            if (num <= target && listSum + num <= target) {
                intList.remove(position);
                integerList.add(num);
                getCombinations(intList, target, listSet, integerList);
                intList.add(position, num);
                integerList.remove(integerList.size() - 1);
            }
            position++;
        }
    }

    private int getListSum(List<Integer> integerList) {
        int sum = 0;
        for (int num : integerList) {
            sum += num;
        }
        return sum;
    }
}
