/**
 * The count-and-say sequence is the sequence of integers with the first five terms as following:
 *
 * 1.     1
 * 2.     11
 * 3.     21
 * 4.     1211
 * 5.     111221
 * 1 is read off as "one 1" or 11.
 * 11 is read off as "two 1s" or 21.
 * 21 is read off as "one 2, then one 1" or 1211.
 *
 * Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.
 *
 * Note: Each term of the sequence of integers will be represented as a string.
 */
 
 class Solution {
    public String countAndSay(int n) {
        if (n == 1) {
            return "1";
        } else {
            List<StringBuffer> stringBufferList = new ArrayList<>();
            stringBufferList.add(new StringBuffer().append("1"));
            recursiveGenerateAllStrings(n, stringBufferList, 2);
            return stringBufferList.get(stringBufferList.size()-1).toString();
        }
    }

    private void recursiveGenerateAllStrings(int n, List<StringBuffer> stringBufferList, int current) {
        StringBuffer currentBuffer = stringBufferList.get(stringBufferList.size() - 1);
        StringBuffer nextBuffer = new StringBuffer();
        int i = currentBuffer.length() - 1;
        while (i > -1) {
            int counter = findSameDigit(currentBuffer, i);
            nextBuffer.insert(0, String.valueOf(currentBuffer.charAt(i)));
            nextBuffer.insert(0, String.valueOf(counter));
            i -= counter;
        }
        stringBufferList.add(nextBuffer);
        current++;
        if (current <= n) {
            recursiveGenerateAllStrings(n, stringBufferList, current);
        }

    }

    private int findSameDigit(StringBuffer currentBuffer, int i) {
        int counter = 1;
        for (int j = i; j > -1; j--) {
            int k = j - 1;
            if (k > -1 && (currentBuffer.charAt(k) == currentBuffer.charAt(j))) {
                counter++;
            } else {
                break;
            }
        }
        return counter;
    }
}
