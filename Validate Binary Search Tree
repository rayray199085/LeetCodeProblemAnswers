/**
 * Given a binary tree, determine if it is a valid binary search tree (BST).
 *
 * Assume a BST is defined as follows:
 *
 * The left subtree of a node contains only nodes with keys less than the node's key.
 * The right subtree of a node contains only nodes with keys greater than the node's key.
 * Both the left and right subtrees must also be binary search trees.
 * Example 1:
 *
 * Input:
 *     2
 *    / \
 *   1   3
 * Output: true
 * Example 2:
 *
 *     5
 *    / \
 *   1   4
 *      / \
 *     3   6
 * Output: false
 * Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
 *              is 5 but its right child's value is 4.
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public  boolean isValidBST(TreeNode root) {
        if (root == null) {
            return true;
        }
        List<Integer> beforeSortList = new ArrayList<>();
        preOrderTraverse(beforeSortList,root);
        for(int i = 0; i < beforeSortList.size() -1; i++){
            int j = i + 1;
            if(beforeSortList.get(i).equals(beforeSortList.get(j))){
                return false;
            }
        }
        List<Integer> afterSortList = new ArrayList<>(beforeSortList);
        Collections.sort(afterSortList);
        return afterSortList.equals(beforeSortList);
    }

    private  void preOrderTraverse(List<Integer> integerList, TreeNode root) {
        if (root == null) {
            return;
        }
        if(root.left!=null){
            preOrderTraverse(integerList,root.left);
        }
        integerList.add(root.val);
        if(root.right!=null){
            preOrderTraverse(integerList,root.right);
        }
    }
}
