/**
 * Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
 *
 * You may assume that the intervals were initially sorted according to their start times.
 *
 * Example 1:
 *
 * Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
 * Output: [[1,5],[6,9]]
 * Example 2:
 *
 * Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
 * Output: [[1,2],[3,10],[12,16]]
 * Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
 */
 
 /**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public static List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        if (newInterval==null) {
            return intervals;
        }
        if(intervals.size()==0){
            intervals.add(newInterval);
            return intervals;
        }
        if(newInterval.start<intervals.get(0).start){
            intervals.add(0,newInterval);
        }
        for(int i = intervals.size()-1; i >-1; i--){
            if(newInterval.start>=intervals.get(i).start){
                intervals.add(i+1,newInterval);
                break;
            }
        }
        int i = 0;
        while (i < intervals.size() - 1) {
            int j = i + 1;
            while (j < intervals.size()) {
                if (intervals.get(i).start <= intervals.get(j).start && intervals.get(i).end >= intervals.get(j).end) {
                    intervals.remove(intervals.get(j));
                    j = i;
                } else if (intervals.get(j).start <= intervals.get(i).start && intervals.get(j).end >= intervals.get(i).end) {
                    intervals.remove(intervals.get(i));
                    j = i;
                } else if (intervals.get(i).end >= intervals.get(j).start && intervals.get(j).end > intervals.get(i).end) {
                    intervals.get(i).end = intervals.get(j).end;
                    intervals.remove(intervals.get(j));
                    j = i;
                } else if (intervals.get(i).start <= intervals.get(j).end && intervals.get(i).end > intervals.get(j).start) {
                    intervals.get(i).start = intervals.get(j).start;
                    intervals.remove(intervals.get(j));
                    j = i;
                }
                j++;
            }
            i++;
        }
    
        return intervals;
    }
}
