/**
 * Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
 *
 * (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
 *
 * You are given a target value to search. If found in the array return its index, otherwise return -1.
 *
 * You may assume no duplicate exists in the array.
 *
 * Your algorithm's runtime complexity must be in the order of O(log n).
 *
 * Example 1:
 *
 * Input: nums = [4,5,6,7,0,1,2], target = 0
 * Output: 4
 * Example 2:
 *
 * Input: nums = [4,5,6,7,0,1,2], target = 3
 * Output: -1
 */
 class Solution {
    public int search(int[] nums, int target) {
        if (nums.length == 0) {
            return -1;
        }
        int left = 0;
        int right = nums.length - 1;
        int mid = left + right / 2;
        int result = binarySearch(mid, left, right, nums, target);
        return result;
    }
    private int binarySearch(int mid, int left, int right, int[] nums, int target) {
        if (left > right) {
            if (nums[mid] == target) {
                return mid;
            } else {
                return -1;
            }
        } else {
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < nums[right]) {
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;
                    return binarySearch((left + right) / 2, left, right, nums, target);
                } else {
                    right = mid - 1;
                    return binarySearch((left + right) / 2, left, right, nums, target);
                }
            } else {
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                    return binarySearch((left + right) / 2, left, right, nums, target);
                } else {
                    left = mid + 1;
                    return binarySearch((left + right) / 2, left, right, nums, target);
                }
            }
        }
    }
}
