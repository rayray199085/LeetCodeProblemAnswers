/**
 * Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
 *
 * Example:
 *
 * Input: n = 4, k = 2
 * Output:
 * [
 *   [2,4],
 *   [3,4],
 *   [2,3],
 *   [1,2],
 *   [1,3],
 *   [1,4],
 * ]
 */
 
 class Solution {
     public static List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> listList = new ArrayList<>();
        findAllPossibilities(listList, new ArrayList<Integer>(), n, k, 0);
        return listList;
    }

    private static void findAllPossibilities(List<List<Integer>> listList, ArrayList<Integer> integers, int n, int k, int currentIndex) {
        if (integers.size() == k) {
            List<Integer> list = new ArrayList<>(integers);
            listList.add(list);
            return;
        }
        for (int i = 1; i <= n; i++) {
            if (i > currentIndex && !integers.contains(i)) {
                integers.add(i);
                findAllPossibilities(listList, integers, n, k, i);
                integers.remove(integers.size() - 1);
            }
        }
    }
}
