/**
 * The n-queens puzzle is the problem of placing n queens on 
 * 
 * an n√ón chessboard such that no two queens attack each other.
 *
 * Given an integer n, return all distinct solutions to the n-queens puzzle.
 *
 * Each solution contains a distinct board configuration of the n-queens' placement, 
 * 
 * where 'Q' and '.' both indicate a queen and an empty space respectively.
 */

class Solution {
public static List<List<String>> solveNQueens(int n) {
        List<List<String>> listList = new ArrayList<>();
        if (n == 0) {
            return listList;
        }
        List<String> board = new ArrayList<>();
        initTheBoard(board, n);
        Set<String> possibleSet = new HashSet<>();
        findSolutions(listList, board, n, 0, possibleSet, 0);
        return listList;
    }

    private static void findSolutions(List<List<String>> listList, List<String> board, int n,
                                      int queenCount, Set<String> possibleSet, int currentRow) {
        if (queenCount == n) {
            List<String> stringList = new ArrayList<>(board);
            listList.add(stringList);
            return;
        }
        for (int i = 0; i < board.size(); i++) {
            if (i == currentRow) {
                continue;
            }
            for (int j = 0; j < board.get(i).length(); j++) {
                boolean isSafe = checkSafety(i, j, board);
                if (isSafe) {
                    StringBuilder stringBuilder = new StringBuilder();
                    String originalString = board.get(i);
                    stringBuilder.append(originalString);
                    stringBuilder.replace(j, j + 1, "Q");
                    board.set(i, stringBuilder.toString());
                    queenCount++;
                    if (possibleSet.add(board.toString())) {
                        findSolutions(listList, board, n, queenCount, possibleSet, i);
                    }
                    queenCount--;
                    board.set(i, originalString);
                }
            }
        }

    }

    private static boolean checkSafety(int row, int column, List<String> board) {
        // check row
        if (board.get(row).contains("Q")) {
            return false;
        }
        //check column
        for (int i = 0; i < board.size(); i++) {
            if (i != row) {
                if ("Q".equals(String.valueOf(board.get(i).charAt(column)))) {
                    return false;
                }
            }
        }
        //check diagonal
        //bottom left to top right
        int i = row - 1;
        int j = column + 1;
        while (i > -1 && j < board.size()) {
            if ("Q".equals(String.valueOf(board.get(i).charAt(j)))) {
                return false;
            }
            i--;
            j++;
        }
        i = row + 1;
        j = column - 1;
        while (i < board.size() && j > -1) {
            if ("Q".equals(String.valueOf(board.get(i).charAt(j)))) {
                return false;
            }
            i++;
            j--;
        }
        // bottom right to top left
        i = row - 1;
        j = column - 1;
        while (i > -1 && j > -1) {
            if ("Q".equals(String.valueOf(board.get(i).charAt(j)))) {
                return false;
            }
            i--;
            j--;
        }
        i = row + 1;
        j = column + 1;
        while (i < board.size() && j < board.size()) {
            if ("Q".equals(String.valueOf(board.get(i).charAt(j)))) {
                return false;
            }
            i++;
            j++;
        }
        return true;
    }

    private static void initTheBoard(List<String> board, int n) {
        for (int i = 0; i < n; i++) {
            StringBuilder stringBuilder = new StringBuilder();
            for (int j = 0; j < n; j++) {
                stringBuilder.append(".");
            }
            board.add(stringBuilder.toString());
        }
    }
}
