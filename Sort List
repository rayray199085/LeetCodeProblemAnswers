/**
 * Sort a linked list in O(n log n) time using constant space complexity.
 *
 * Example 1:
 *
 * Input: 4->2->1->3
 * Output: 1->2->3->4
 * Example 2:
 *
 * Input: -1->5->3->4->0
 * Output: -1->0->3->4->5
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null) return null;
        LinkedList<Integer> integers = new LinkedList<>();
        getNodeValues(integers,head);
        Collections.sort(integers);
        assignNodeNewValue(head,integers);
        return head;
    }

    private void assignNodeNewValue(ListNode head, LinkedList<Integer> integers) {
        if(integers.isEmpty()) return;
        head.val = integers.removeFirst();
        assignNodeNewValue(head.next,integers);
    }

    private void getNodeValues(LinkedList<Integer> integers, ListNode head) {
        if(head == null) return;
        integers.add(head.val);
        getNodeValues(integers,head.next);
    }
}
