/**
 * Given an integer array nums, find the contiguous subarray (containing at least one number)
 * 
 * which has the largest sum and return its sum.
 *
 * Example:
 *
 * Input: [-2,1,-3,4,-1,2,1,-5,4],
 * Output: 6
 * Explanation: [4,-1,2,1] has the largest sum = 6.
 */
 
 class Solution {
    public int maxSubArray(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        return findLargestSum(nums, nums[0]);
    }

    private int findLargestSum(int[] nums, int maxSum) {
        for (int i = 0; i < nums.length; i++) {
            int currentMax = calculateTheMaxSum(i, nums);
            if (currentMax > maxSum) {
                maxSum = currentMax;
            }
        }
        return maxSum;
    }

    private int calculateTheMaxSum(int pos, int[] nums) {
        int currentMax = nums[pos];
        int sum = currentMax;
        for (int i = pos+1; i < nums.length; i++) {
            sum += nums[i];
            if (sum > currentMax) {
                currentMax = sum;
            }
        }
        return currentMax;
    }
}
