/**
 * Given a binary tree, return the zigzag level order traversal of its nodes' values. 
 * 
 * (ie, from left to right, then right to left for the next level and alternate between).
 *
 * For example:
 * Given binary tree [3,9,20,null,null,15,7],
 *
 *     3
 *    / \
 *   9  20
 *     /  \
 *    15   7
 * return its zigzag level order traversal as:
 *
 * [
 *   [3],
 *   [20,9],
 *   [15,7]
 * ]
 */
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> listList = new ArrayList<>();
        if (root == null) {
            return listList;
        }
        inOrderTraverse(listList, root, 0);
        for(int i = 0; i < listList.size(); i++){
            if(i % 2 != 0){
                reverseOrder(listList.get(i));
            }
        }
        return listList;
    }

    private void reverseOrder(List<Integer> integers) {
        int start = 0;
        int end = integers.size() -1;
        while(start <= end){
            int temp = integers.get(start);
            integers.set(start, integers.get(end));
            integers.set(end, temp);
            start++;
            end--;
        }
    }


    private  void inOrderTraverse(List<List<Integer>> listList, TreeNode root, int currentLevel) {
        if (root == null) {
            return;
        }
        List<Integer> currentLevelList = null;
        if (currentLevel >= listList.size()) {
            currentLevelList = new ArrayList<>();
            listList.add(currentLevelList);
        } else {
            currentLevelList = listList.get(currentLevel);
        }
        currentLevelList.add(root.val);
        listList.set(currentLevel, currentLevelList);
        inOrderTraverse(listList, root.left, currentLevel + 1);
        inOrderTraverse(listList, root.right, currentLevel + 1);
    }
}
