/**
 * Given a non-empty binary tree, find the maximum path sum.
 *
 * For this problem, a path is defined as any sequence of nodes from some starting node to
 *
 * any node in the tree along the parent-child connections.
 *
 * The path must contain at least one node and does not need to go through the root.
 *
 * Example 1:
 *
 * Input: [1,2,3]
 *
 *        1
 *       / \
 *      2   3
 *
 * Output: 6
 * Example 2:
 *
 * Input: [-10,9,20,null,null,15,7]
 *
 *    -10
 *    / \
 *   9  20
 *     /  \
 *    15   7
 *
 * Output: 42
 */
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public  int maxPathSum(TreeNode root) {
        if(root == null){
            return 0;
        }
        int[] maxSum = new int[]{Integer.MIN_VALUE};
        postOrderTraversalFindMaxSum(root,maxSum);
        return maxSum[0];
    }

    private static int postOrderTraversalFindMaxSum(TreeNode root, int[] maxSum) {
        if (root == null) {
            return 0;
        }
        int left = postOrderTraversalFindMaxSum(root.left, maxSum);
        int right = postOrderTraversalFindMaxSum(root.right, maxSum);
        
        if (left >= 0 && right >= 0) {
            if (maxSum[0] < root.val + left + right) {
                maxSum[0] = root.val + left + right;
            }
            return root.val + Math.max(left , right);
        } else if (left >= 0 && right < 0) {
            if (maxSum[0] < root.val + left) {
                maxSum[0] = root.val + left;
            }
            return root.val + left;
        } else if (left < 0 && right >= 0) {
            if (maxSum[0] < root.val + right) {
                maxSum[0] = root.val + right;
            }
            return root.val + right;
        } else {
            if (maxSum[0] < root.val) {
                maxSum[0] = root.val;
            }
            return root.val;
        }
    }
}
