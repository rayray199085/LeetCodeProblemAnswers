/**
 * Given a collection of intervals, merge all overlapping intervals.
 *
 * Example 1:
 *
 * Input: [[1,3],[2,6],[8,10],[15,18]]
 * Output: [[1,6],[8,10],[15,18]]
 * Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
 * Example 2:
 *
 * Input: [[1,4],[4,5]]
 * Output: [[1,5]]
 * Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 */
 
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public static List<Interval> merge(List<Interval> intervals) {
        if (intervals.size() < 2) {
            return intervals;
        }
        int i = 0;
        while (i < intervals.size() - 1) {
            int j = i + 1;
            while (j < intervals.size()) {
                if (intervals.get(i).start <= intervals.get(j).start && intervals.get(i).end >= intervals.get(j).end) {
                    intervals.remove(intervals.get(j));
                    j = i;
                } else if (intervals.get(j).start <= intervals.get(i).start && intervals.get(j).end >= intervals.get(i).end) {
                    intervals.remove(intervals.get(i));
                    j = i;
                } else if (intervals.get(i).end >= intervals.get(j).start && intervals.get(j).end > intervals.get(i).end) {
                    intervals.get(i).end = intervals.get(j).end;
                    intervals.remove(intervals.get(j));
                    j = i;
                } else if (intervals.get(i).start <= intervals.get(j).end && intervals.get(i).end > intervals.get(j).start) {
                    intervals.get(i).start = intervals.get(j).start;
                    intervals.remove(intervals.get(j));
                    j = i;
                }
                j++;
            }
            i++;
        }
        
        return intervals;
    }
}
