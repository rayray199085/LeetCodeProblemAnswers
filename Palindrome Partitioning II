/***
 * Given a string s, partition s such that every substring of the partition is a palindrome.
 *
 * Return the minimum cuts needed for a palindrome partitioning of s.
 *
 * Example:
 *
 * Input: "aab"
 * Output: 1
 * Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
 */
 class Solution {
     public int minCut(String s) {
        int n = s.length();
        boolean dp[][] = new boolean[n][n];
        int cut[] = new int[n];
        Arrays.fill(cut, n - 1); //maximum cut
        for (int j = 0; j < n; j++) {
            for (int i = 0; i <= j; i++) {
                if (s.charAt(i) == s.charAt(j) && (j - i <= 1 || dp[i + 1][j - 1])) {
                    dp[i][j] = true;
                    if (i == 0)
                        cut[j] = 0; //no cut needed
                    else
                        cut[j] = Math.min(cut[j], cut[i - 1] + 1);
                }
            }
        }
        return cut[n - 1];
    }
}
