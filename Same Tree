/**
 * Given two binary trees, write a function to check if they are the same or not.
 *
 * Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
 *
 * Example 1:
 *
 * Input:     1         1
 *           / \       / \
 *          2   3     2   3
 *
 *         [1,2,3],   [1,2,3]
 *
 * Output: true
 * Example 2:
 *
 * Input:     1         1
 *           /           \
 *          2             2
 *
 *         [1,2],     [1,null,2]
 *
 * Output: false
 * Example 3:
 *
 * Input:     1         1
 *           / \       / \
 *          2   1     1   2
 *
 *         [1,2,1],   [1,1,2]
 *
 * Output: false
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public static boolean isSameTree(TreeNode p, TreeNode q) {
        if (p == null && q == null) {
            return true;
        } else if (p == null || q == null) {
            return false;
        }
        int[] firstChildrenCount = new int[2];
        int[] secondChildrenCount = new int[2];
        List<Integer> firstList = new ArrayList<>();
        List<Integer> secondList = new ArrayList<>();
        inOrderTraverse(firstList, p, firstChildrenCount);
        inOrderTraverse(secondList, q, secondChildrenCount);
         return firstList.equals(secondList) && firstChildrenCount[0] == secondChildrenCount[0] && firstChildrenCount[1] == secondChildrenCount[1];
    }

    private static void inOrderTraverse(List<Integer> firstList, TreeNode node, int[] childrenCount) {
        if (node == null) {
            return;
        }
        if (node.left != null) {
            childrenCount[0]++;
            inOrderTraverse(firstList, node.left, childrenCount);
        }

        firstList.add(node.val);
        if (node.right != null) {
            childrenCount[1]++;
            inOrderTraverse(firstList, node.right, childrenCount);
        }
    }
}
