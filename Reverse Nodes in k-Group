/**
 * Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
 *
 * k is a positive integer and is less than or equal to the length of the linked list. 
 * If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
 *
 * Example:
 *
 * Given this linked list: 1->2->3->4->5
 *
 * For k = 2, you should return: 2->1->4->3->5
 *
 * For k = 3, you should return: 3->2->1->4->5
 */
 
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head==null){
            return null;
        }
        List<Integer> nodeValueList = new ArrayList<>();
        nodeValueList = getNodeValues(head, nodeValueList);
        nodeValueList = reverseNodeGroup(nodeValueList, k);
        int headValue = nodeValueList.get(0);
        nodeValueList.remove(0);
        ListNode newHeadNode = new ListNode(headValue);
        generateNewNodeList(newHeadNode, nodeValueList);
        return newHeadNode;
    }

    private void generateNewNodeList(ListNode newHeadNode, List<Integer> nodeValueList) {
        if(nodeValueList.size()==0){
            return;
        }else {
            int nextValue = nodeValueList.get(0);
            nodeValueList.remove(0);
            ListNode nextNode = new ListNode(nextValue);
            newHeadNode.next = nextNode;
            generateNewNodeList(nextNode,nodeValueList);
        }
    }

    private List<Integer> reverseNodeGroup(List<Integer> nodeValueList, int k) {
        if (k == nodeValueList.size()) {
                Collections.reverse(nodeValueList);
                return nodeValueList;
        } else {
            int position = 0;
            while (position + k <= nodeValueList.size()) {
                List<Integer> reversePart = new ArrayList<>();
                for (int i = position; i < position + k; i++) {
                    reversePart.add(nodeValueList.get(i));
                }
                Collections.reverse(reversePart);
                for (int i = position; i < position + k; i++) {
                    nodeValueList.set(i, reversePart.get(i - position));
                }
                position += k;
            }
            return nodeValueList;
        }
    }

    private List<Integer> getNodeValues(ListNode head, List<Integer> nodeValueList) {
        if (head == null) {
            return nodeValueList;
        } else {
            nodeValueList.add(head.val);
            return getNodeValues(head.next, nodeValueList);
        }
    }
}
