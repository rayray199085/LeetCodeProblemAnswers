/**
 * Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).
 *
 * For example:
 * Given binary tree [3,9,20,null,null,15,7],
 *
 *     3
 *    / \
 *   9  20
 *     /  \
 *    15   7
 * return its level order traversal as:
 *
 * [
 *   [3],
 *   [9,20],
 *   [15,7]
 * ]
 */
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> listList = new ArrayList<>();
        if(root == null){
            return listList;
        }
        inOrderTraverse(listList,root,0);
        return listList;
    }

    private void inOrderTraverse(List<List<Integer>> listList, TreeNode root, int currentLevel) {
        if(root == null){
            return;
        }
        List<Integer> currentLevelList = null;
        if(currentLevel >= listList.size()){
            currentLevelList = new ArrayList<>();
            listList.add(currentLevelList);
        }else{
            currentLevelList = listList.get(currentLevel);
        }
        currentLevelList.add(root.val);
        listList.set(currentLevel,currentLevelList);
        inOrderTraverse(listList,root.left,currentLevel+1);
        inOrderTraverse(listList,root.right,currentLevel+1);
    }
}
