/**
 * Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.
 *
 * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
 *
 * Example 1:
 *
 * Given nums = [1,1,1,2,2,3],
 *
 * Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
 *
 * It doesn't matter what you leave beyond the returned length.
 * Example 2:
 *
 * Given nums = [0,0,1,1,1,1,2,3,3],
 *
 * Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively.
 *
 * It doesn't matter what values are set beyond the returned length.
 */
 
class Solution {
     public static int removeDuplicates(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        int currentValue = nums[0];
        int currentCount = 1;
        int index = 1;
        while (index < nums.length) {
            if (nums[index] == currentValue) {
                currentCount++;
                if (currentCount > 2) {
                    replaceTheRemainWithMax(index, nums, currentValue);
                    currentCount = 0;
                }
            } else if(nums[index] == Integer.MAX_VALUE){

            }else {
                currentValue = nums[index];
                currentCount = 1;
            }
            index++;
        }
        Arrays.sort(nums);
        int validCount = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] <Integer.MAX_VALUE){
                validCount++;
            }else {
                break;
            }
        }
        return validCount;
    }

    private static void replaceTheRemainWithMax(int index, int[] nums, int currentValue) {
        for (int i = index; i < nums.length; i++) {
            if (nums[i] == currentValue) {
                nums[i] = Integer.MAX_VALUE;
            } else {
                return;
            }
        }
    }
}
