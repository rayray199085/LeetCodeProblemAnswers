/**
 * Subsets
 * Medium
 *
 * 1505
 *
 * 38
 *
 * Favorite
 *
 * Share
 * Given a set of distinct integers, nums, return all possible subsets (the power set).
 *
 * Note: The solution set must not contain duplicate subsets.
 *
 * Example:
 *
 * Input: nums = [1,2,3]
 * Output:
 * [
 *   [3],
 *   [1],
 *   [2],
 *   [1,2,3],
 *   [1,3],
 *   [2,3],
 *   [1,2],
 *   []
 * ]
 */
 
 class Solution {
    public static List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> listList = new ArrayList<>();
        findAllSubsets(listList, new ArrayList<Integer>(), -1, 0, nums);
        return listList;
    }

    private static void findAllSubsets(List<List<Integer>> listList,
                                       ArrayList<Integer> integers, int previousIndex, int currentLength, int[] nums) {
        if (integers.size() > nums.length ) {
            return;
        }
        if (integers.size() == currentLength) {
            List<Integer> integerList = new ArrayList<>(integers);
            listList.add(integerList);
        }
        for (int i = 0; i < nums.length; i++) {
            if (i > previousIndex) {
                integers.add(nums[i]);
                findAllSubsets(listList, integers, i, currentLength + 1, nums);
                integers.remove(integers.size() - 1);
            }
        }
    }
}
