/**
 * Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.
 *
 * Example:
 *
 * Input: 3
 * Output:
 * [
 *  [ 1, 2, 3 ],
 *  [ 8, 9, 4 ],
 *  [ 7, 6, 5 ]
 * ]
 */

class Solution {
    public static int[][] generateMatrix(int n) {
        int[][] matrix = new int[n][n];
        if (n == 0) {
            return matrix;
        }else if (n == 1) {
            matrix[0][0] = 1;
            return matrix;
        }
        int[] currentPosition = new int[2];
        int[] currentValue = new int[1];
        currentValue[0] = 1;
        fillTheMatrix(matrix, currentPosition, currentValue);
        return matrix;
    }

    private static void fillTheMatrix(int[][] matrix, int[] currentPosition, int[] currentValue) {
        if (currentValue[0] == matrix.length * matrix[0].length + 1) {
            return;
        }
        walkToRight(matrix, currentPosition, currentValue);
        currentPosition[0]++;
        walkToBottom(matrix, currentPosition, currentValue);
        currentPosition[1]--;
        walkToLeft(matrix, currentPosition, currentValue);
        currentPosition[0]--;
        walkToTop(matrix, currentPosition, currentValue);
        currentPosition[1]++;
        fillTheMatrix(matrix,currentPosition,currentValue);
    }

    private static void walkToTop(int[][] matrix, int[] currentPosition, int[] currentValue) {
        for (int i = currentPosition[0]; i > -1; i--) {
            if (matrix[i][currentPosition[1]] == 0) {
                matrix[i][currentPosition[1]] = currentValue[0]++;
                currentPosition[0] = i;
            } else {
                return;
            }
        }
    }

    private static void walkToLeft(int[][] matrix, int[] currentPosition, int[] currentValue) {
        for (int i = currentPosition[1]; i > -1; i--) {
            if (matrix[currentPosition[0]][i] == 0) {
                matrix[currentPosition[0]][i] = currentValue[0]++;
                currentPosition[1] = i;
            } else {
                return;
            }
        }
    }

    private static void walkToBottom(int[][] matrix, int[] currentPosition, int[] currentValue) {
        for (int i = currentPosition[0]; i < matrix.length; i++) {
            if (matrix[i][currentPosition[1]] == 0) {
                matrix[i][currentPosition[1]] = currentValue[0]++;
                currentPosition[0] = i;
            } else {
                return;
            }
        }
    }

    private static void walkToRight(int[][] matrix, int[] currentPosition, int[] currentValue) {
        for (int i = currentPosition[1]; i < matrix[currentPosition[0]].length; i++) {
            if (matrix[currentPosition[0]][i] == 0) {
                matrix[currentPosition[0]][i] = currentValue[0]++;
                currentPosition[1] = i;
            } else {
                return;
            }
        }
    }
}
