/**
 * Given a linked list, remove the n-th node
 * from the end of list and return its head.
 *
 * Example:
 *
 * Given linked list: 1->2->3->4->5, and n = 2.
 *
 * After removing the second node from the end, the linked list becomes 1->2->3->5.
 */
 
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
     public ListNode removeNthFromEnd(ListNode head, int n) {
        List<ListNode> nodeList = new ArrayList<>();
        nodeList = storeWholeList(head, nodeList);
        if(nodeList.size()<n){
            return null;
        }
        int originalSize = nodeList.size();
        int position = originalSize - n;

        if(position==0){
            if(nodeList.size()==1){
                return null;
            }
            return nodeList.get(1);
        }
        else if(position == originalSize -1){
            nodeList.get(originalSize-2).next=null;
            return nodeList.get(0);
        }
        else{
            nodeList.get(position-1).next = nodeList.get(position+1);
            return nodeList.get(0);
        }
    }

    private List<ListNode> storeWholeList(ListNode head, List<ListNode> nodeList) {
        if (head == null) {
            return nodeList;
        } else {
            nodeList.add(head);
            return storeWholeList(head.next, nodeList);
        }
    }
}
